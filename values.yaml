# Default values for ma1sd.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: ma1uta/ma1sd
  tag: "{{ .Chart.AppVersion }}"
  pullPolicy: IfNotPresent

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # privileged: true
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  externalTrafficPolicy:
  type: ClusterIP
  port: 8090
probes:
  liveness:
    failureThreshold: 5
    periodSeconds: 10
  readiness:
    failureThreshold: 5
    periodSeconds: 10
  startup:
    initialDelaySeconds: 5
    failureThreshold: 30
    periodSeconds: 10

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local

  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

podAnnotations: {}

deploymentAnnotations: {}

config:
  logging:
    root: info
    app: info
  matrix:
    domain: example.com

  server:
    name: matrix.example.com
    port: 8090
    publicUrl: https://matrix.example.com

  key:
    # Can be stored in the PVC as well, in which case it will be generated
    path: /etc/ma1sd/signing.key

  storage:
    backend: sqlite
    provider:
      sqlite:
        database: /var/lib/ma1sd/ma1sd.db

  forward:
    servers:
      - matrix.org

  dns:
    overwrite:
      homeserver:
        client: []
          #- name: matrix.example.com
          #value: 'http://synapse.matrix.svc:8008'

# signing_key -- Generate with `python3 -e "import string; import random; import sys; from signedjson.key import generate_signing_key, write_signing_keys; write_signing_keys(sys.stdout,(generate_signing_key("a_" + "".join(random.SystemRandom().choice(string.ascii_letters) for _ in range(4))),))"` or use synapse signing key
signing_key:

## Persist configuration to a persistent volume
persistence:
  # persistence.enabled - Should disk persistence be enabled
  enabled: false
  ## If defined, storageClassName: <storageClass>
  ## If unset, storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  existingClaim:
  storageClassName:
  accessModes:
    - ReadWriteOnce
  size: 1Gi
  ## persistence.skipuninstall -- Do not delete the pvc upon helm uninstall
  skipuninstall: false

